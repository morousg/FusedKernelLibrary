name: CMake on Windows (x64)
'on':
  pull_request:
    branches:
      - main
      - 54-add-a-runtime-compilation-version-of-the-library-for-nvidia-gpus
jobs:
  build:
    runs-on:
      - self-hosted
      - windows
      - x64
    strategy:
      fail-fast: false
      matrix:
        build_type:
          - Release
        toolset:
          # due to compiler limitations eating lots of system ram, we need to disable cuda 11.8 compilation
          # - 'v141,cuda=11.8' #disabled until https://github.com/Libraries-Openly-Fused/FusedKernelLibrary/issues/119 is resolved
          - 'v143,cuda=12.9'
          - 'ClangCl,cuda=12.9'
        cpp_compiler:
          - cl
    steps:
      - uses: actions/checkout@v4
      - name: Set reusable strings
        id: strings
        run: >
          echo "build-output-dir=${{github.workspace}}/build" >>
          "$env:GITHUB_OUTPUT"                    
      - name: Configure CMake
        run: >
          $vsWhere = "${Env:ProgramFiles(x86)}\Microsoft Visual
          Studio\Installer\vswhere.exe"   

          $vsInstallationPath = & $vsWhere -products * -latest -property
          installationPath

          & "${vsInstallationPath}\Common7\Tools\Launch-VsDevShell.ps1" -Arch
          amd64 -HostArch amd64 -SkipAutomaticLocation                

          cmake -G "Visual Studio 17 2022"  -B
          ${{steps.strings.outputs.build-output-dir}}
          -DCMAKE_BUILD_TYPE=${{matrix.build_type}} -T ${{matrix.toolset}} -S
          ${{github.workspace}};        
      - name: Build
        run: >
          $poolsize=$env:NUMBER_OF_PROCESSORS/1;
          $vsWhere = "${Env:ProgramFiles(x86)}\Microsoft Visual
          Studio\Installer\vswhere.exe"   

          $vsInstallationPath = & $vsWhere -products * -latest -property
          installationPath

          & "${vsInstallationPath}\Common7\Tools\Launch-VsDevShell.ps1" -Arch
          amd64 -HostArch amd64 -SkipAutomaticLocation         
          
          cmake --build ${{ steps.strings.outputs.build-output-dir }} --config
          ${{ matrix.build_type }} --parallel  $poolsize
            
      - name: Test
        working-directory: '${{ steps.strings.outputs.build-output-dir }}'
        run: >-
          ctest --build-config ${{ matrix.build_type }} --output-junit
          test_results.xml
