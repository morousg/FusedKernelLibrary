name: CMake on Linux (x86_64)

on:
  #push:
 #  branches: [ $default-branch ]
  pull_request:
    branches: "main" 

concurrency:
    group: ${{ github.workflow }}-${{ github.ref }}
    cancel-in-progress: true  

jobs:
  build:
    runs-on:   [self-hosted, linux, x64]
    timeout-minutes: 10 # Increase this timeout value as needed
    strategy:
      # Set fail-fast to false to ensure that feedback is delivered for all matrix combinations. Consider changing this to true when your workflow is stable.
      fail-fast: true

      matrix:        
        build_type: [Release]
        cpp_compiler: [g++,clang++]   
              
 
           
    steps:
    - uses: actions/checkout@v4
    - name: Add to PATH
      shell: bash
      run: |
        echo "/usr/lib/llvm-19/bin" >> $GITHUB_PATH
        
    - name: Set reusable strings
      # Turn repeated input strings (such as the build output directory) into step outputs. These step outputs can be used throughout the workflow file.
      id: strings
      run: |      
          echo "build-output-dir=${{github.workspace}}/build" >> "$GITHUB_OUTPUT"        
    
    - name: Configure CMake      
      run: >                 
        cmake -G "Ninja" -B ${{steps.strings.outputs.build-output-dir}}
        -DCMAKE_CXX_COMPILER=${{matrix.cpp_compiler}}        
        -DCMAKE_BUILD_TYPE=${{matrix.build_type}}        
        -S ${{github.workspace}};        
 
    - name: Build
      # Build your program with the given configuration. Note that --config is needed because the default Windows generator is a multi-config generator (Visual Studio generator).      
      run: >           
        cmake --build ${{ steps.strings.outputs.build-output-dir }} 
        --config ${{ matrix.build_type }} 
                     
    - name: Test
      working-directory: ${{ steps.strings.outputs.build-output-dir }}
      # Execute tests defined by the CMake configuration. Note that --build-config is needed because the default Windows generator is a multi-config generator (Visual Studio generator).
      # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
      run: ctest --build-config ${{ matrix.build_type }} --output-junit test_results.xml
    